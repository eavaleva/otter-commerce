generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  firstName        String?
  lastName         String?
  password         String?
  role             UserRole       @default(CUSTOMER)
  stripeCustomerId String?
  googleId         String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  refreshTokens    RefreshToken[]
  addresses        Address[]
  cart             Cart?
  orders           Order[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id        String      @id @default(uuid())
  userId    String
  street    String
  city      String
  country   String
  zipCode   String
  isDefault Boolean     @default(false)
  type      AddressType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  quantity    Int            @default(0)
  status      ProductStatus  @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categoryId  String
  sku         String         @unique
  dimensions  String?
  featured    Boolean        @default(false)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
  category    Category       @relation(fields: [categoryId], references: [id])

  @@index([status])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  isPrimary Boolean  @default(false)
  altText   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
  @@index([productId])
  @@map("product_images")
}

model Order {
  id                    String      @id @default(uuid())
  userId                String
  status                OrderStatus @default(PENDING)
  total                 Decimal     @db.Decimal(10, 2)
  shippingAddressId     String
  billingAddressId      String
  stripePaymentIntentId String?
  subtotal              Decimal     @db.Decimal(10, 2)
  tax                   Decimal     @db.Decimal(10, 2)
  shipping              Decimal     @db.Decimal(10, 2)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  items                 OrderItem[]
  user                  User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

enum AddressType {
  SHIPPING
  BILLING
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
